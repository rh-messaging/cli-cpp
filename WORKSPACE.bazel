workspace(name = "cli_cpp")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Group the sources of the library so that CMake rule have access to it
all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

# Rule repository
http_archive(
   name = "rules_foreign_cc",
   strip_prefix = "rules_foreign_cc-master",
   url = "https://github.com/bazelbuild/rules_foreign_cc/archive/master.zip",
)

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

# Call this function from the WORKSPACE file to initialize rules_foreign_cc
#  dependencies and let neccesary code generation happen
#  (Code generation is needed to support different variants of the C++ Starlark API.).
#
#  Args:
#    native_tools_toolchains: pass the toolchains for toolchain types
#      '@rules_foreign_cc//tools/build_defs:make_toolchain',
#      '@rules_foreign_cc//tools/build_defs:cmake_toolchain' and
#      '@rules_foreign_cc//tools/build_defs:ninja_toolchain' with the needed platform constraints.
#      If you do not pass anything, registered default toolchains will be selected (see below).
#
#    register_default_tools: if True, the make, cmake and ninja toolchains, calling corresponding
#      preinstalled binaries by name (make, cmake, ninja) will be registered after
#      'native_tools_toolchains' without any platform constraints.
#      The default is True.
#rules_foreign_cc_dependencies([
#    "//:my_make_toolchain",
#    "//:my_cmake_toolchain",
#    "//:my_ninja_toolchain",
#])
rules_foreign_cc_dependencies()

# Qpid upstream source code repositories

http_archive(
   name = "qpid-proton",
   build_file_content = all_content,
   strip_prefix = "qpid-proton-master",
   url = "https://github.com/apache/qpid-proton/archive/master.zip",
)

http_archive(
   name = "qpid-cpp",
   build_file_content = all_content,
   strip_prefix = "qpid-cpp-master",
   url = "https://github.com/apache/qpid-cpp/archive/master.zip",
)
